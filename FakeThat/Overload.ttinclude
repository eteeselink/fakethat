<#+

    private class Arg
    {
        public readonly string TypeName;
        public readonly string Name;
		public readonly int Index;

        public Arg(string typeName, string name, int index)
        {
            TypeName = typeName;
            Name = name;
			Index = index;
        }

        public Arg(int index)
            : this(String.Format("T{0}", index), String.Format("Arg{0}", index), index)
        {
		}

        public string AsField { get { return String.Format("{0} {1}", TypeName, Name); } }
        public string AsParameter { get { return String.Format("{0} {1}", TypeName, Name.ToLower()); } }
    }

    private class Overload
    {
        public readonly string TypeParamList;
        public readonly string ClassName;
        public readonly bool IsFunc;
        public readonly Arg[] Args;
        public readonly Arg Retval;
        public readonly Arg[] Fields; // Retval + Args

        public Overload(int paramCount, bool isFunc)
        {
            ClassName = isFunc ? "Func" : "Action";
            IsFunc = isFunc;
            Args = Enumerable.Range(1, paramCount).Select(i => new Arg(i)).ToArray();
            Retval = new Arg("TRet", "ReturnValue", Args.Length + 1);

            IEnumerable<Arg> fields = Args;
            if (IsFunc)
            {
                fields = fields.Concat(new[] { Retval });
            }
            Fields = fields.ToArray();

            TypeParamList = (Fields.Any()) ? "<" + String.Join(", ", Fields.Select(f => f.TypeName)) + ">" : "";
        }
    }

	public string Ordinal(int number)
	{
		var ones = number % 10;
		var tens = Math.Floor (number / 10f) % 10;
		if (tens == 1)
		{
			return number + "th";
		}

		switch (number % 10)
		{
			case 1: return number + "st";
			case 2: return number + "nd";
			case 3: return number + "rd";
			default: return number + "th";
		}
	}

	private Overload[] overloads = 
		Enumerable.Range(0, 9).Select(i => new Overload(i, false))
		.Concat(
			Enumerable.Range(0, 9).Select(i => new Overload(i, true))
		).ToArray();
#>