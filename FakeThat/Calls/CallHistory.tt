<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FakeThat.Calls
{
<# foreach(var overload in overloads) { #>
    /// <summary>
    /// Stores a history of all calls made to a certain method or property on a fake object.
    /// </summary>
    public class <#=overload.ClassName#>CallHistory<#=overload.TypeParamList#> : CallHistoryBase<<#=overload.ClassName#>CallHistory<#=overload.TypeParamList#>.Call>
    {
        /// <summary>
        /// Data related to a single call made to a stubbed method or property. Gives strongly-typed access to arguments<# if(overload.IsFunc) { #>and whatever the stub returned<# } #>.
        /// </summary>
        public struct Call
        {
<# foreach(var field in overload.Fields) { #>
            /// <summary>
            /// <# if(field.TypeName == "TRet") { #>The value that the stubbed method/property returned to the software under test<# } else { #>The <#=Ordinal(field.Index)#> argument that the software under test called this stubbed method/property with.<# } #>

            /// </summary>
            public readonly <#=field.AsField#>;
<# } #>
<# if(overload.Fields.Any()) { #>
            internal Call(<#= String.Join(", ", overload.Fields.Select(f => f.AsParameter)) #>)
            {
<# foreach(var field in overload.Fields) { #>
				<#=field.Name#> = <#=field.Name.ToLower()#>;
<# } #>
            }
<# } #>
        }

        internal override void RememberCall(object[] arguments)
        {
            if (arguments.Length != <#=overload.Fields.Length#>)
            {
                throw new ArgumentException("Internal FakeThat error: expected exactly <#=overload.Fields.Length#> arguments");
            }

            var call = new Call(<#= String.Join(", ", overload.Fields.Select(f => String.Format("({0})arguments[{1}]", f.TypeName, f.Index - 1))) #>);
            calls.Add(call);
        } 
    }
<# } #>
}

<#@ include file="../Overload.ttinclude" #>